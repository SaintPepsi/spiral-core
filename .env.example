# ==================================================
# Spiral Core Agent Orchestration System
# Environment Configuration Template
# ==================================================
# 
# Copy this file to `.env` and update the values for your environment.
# All configuration is loaded from environment variables, with sensible 
# defaults provided where possible.

# ==================================================
# Claude Code API Configuration (REQUIRED)
# ==================================================
# These settings configure the connection to Claude's API for AI operations.
# You MUST provide a valid Claude API key for the system to function.

# Your Anthropic API key - get this from https://console.anthropic.com/
# Used by: Claude Code client for all AI operations
CLAUDE_API_KEY=sk-ant-api03-your-api-key-here

# Claude API base URL - rarely needs to be changed
# Used by: Claude Code client for API endpoint routing
CLAUDE_BASE_URL=https://api.anthropic.com

# Claude model to use for all operations
# Used by: All agent interactions, language detection, code generation
CLAUDE_MODEL=claude-sonnet-4-20250514

# Maximum tokens per request to Claude
# Used by: All Claude API calls, affects response length and cost
CLAUDE_MAX_TOKENS=4096

# Temperature for general Claude operations (0.0-1.0)
# Used by: General purpose Claude interactions
# Lower = more deterministic, Higher = more creative
CLAUDE_TEMPERATURE=0.7

# ==================================================
# Discord Bot Configuration (OPTIONAL)
# ==================================================
# Configure Discord integration for conversational agent interactions.
# Leave DISCORD_TOKEN empty to disable Discord functionality.

# Discord bot token from https://discord.com/developers/applications
# Used by: SpiralConstellation bot (single bot with multiple personas)
DISCORD_TOKEN=your-discord-bot-token

# Command prefix for Discord bot commands
# Used by: Discord command parsing (e.g., !spiral help)
DISCORD_PREFIX=!spiral

# Regex pattern for agent mentions in Discord
# Used by: SpiralConstellation bot to detect personas (@SpiralDev, @SpiralPM, etc.)
# Note: Backslashes must be escaped in .env files
AGENT_MENTION_PATTERN="@Spiral(\\w+)"

# Authorized Discord users (comma-separated list of user IDs)
# Used by: ALL SPIRAL INTERACTIONS - REQUIRED FOR DISCORD SECURITY
# IMPORTANT: ALL !spiral commands and @Spiral mentions require authorization
# Get your Discord user ID: Enable Developer Mode, right-click username, "Copy User ID"
DISCORD_AUTHORIZED_USERS=

# ==================================================
# Redis Configuration (CURRENTLY UNUSED)
# ==================================================
# Redis was planned for message queuing but is not currently implemented.
# These variables are preserved for future use.

# Redis connection URL
# Used by: Future message queue implementation
REDIS_URL=redis://localhost:6379

# Task queue name in Redis
# Used by: Future task queuing system
TASK_QUEUE=spiral:tasks

# Result queue name in Redis  
# Used by: Future result processing system
RESULT_QUEUE=spiral:results

# ==================================================
# HTTP API Server Configuration
# ==================================================
# Configure the REST API server for external integrations and monitoring.

# IP address to bind the API server to
# Used by: HTTP API server binding
# 0.0.0.0 = all interfaces, 127.0.0.1 = localhost only
API_HOST=0.0.0.0

# Port for the API server to listen on
# Used by: HTTP API server binding
API_PORT=3000

# Base URL for API requests (used by Hurl tests and clients)
# Used by: API testing, client configuration
BASE_URL=http://127.0.0.1:3000

# ==================================================
# API Authentication (SECURITY)
# ==================================================
# Configure authentication for the HTTP API endpoints.
# IMPORTANT: Enable authentication in production environments!

# Secret key for API authentication - generate a strong random string
# Used by: API authentication middleware for request validation
# Generate with: openssl rand -hex 32
API_KEY=your-secret-api-key-here

# Enable/disable API authentication
# Used by: API authentication middleware
# true = Require API key for all non-health endpoints (DEFAULT)
# false = Allow all requests (DEVELOPMENT ONLY)
# NOTE: Defaults to true if not specified for security
ENABLE_API_AUTH=true

# ==================================================
# Usage Examples
# ==================================================
#
# Development Setup:
# 1. Copy this file to `.env`
# 2. Set CLAUDE_API_KEY to your Anthropic API key
# 3. Set API_KEY to secure value (required - no default)
# 4. Optionally set ENABLE_API_AUTH=false for easier testing
# 5. Optionally configure Discord bot token
# 
# Production Setup:
# 1. Generate strong API_KEY: openssl rand -hex 32
# 2. Authentication is enabled by default (secure by default)
# 3. Use environment-specific Discord tokens
# 4. Consider binding API_HOST to 127.0.0.1 if using reverse proxy
#
# SpiralConstellation Bot Setup:
# 1. Create one Discord application at https://discord.com/developers/applications
# 2. Create a bot and copy the token to DISCORD_TOKEN
# 3. Add the bot to your Discord server with appropriate permissions
# 4. The bot will respond to different agent personas based on mentions
#
# SpiralConstellation Bot Personas:
#   @SpiralDev - üöÄ Software Developer (generates code, implements features)
#   @SpiralPM - üìã Project Manager (analyzes status, coordinates tasks)
#   @SpiralQA - üîç Quality Assurance (reviews code, tests functionality)
#   @SpiralDecide - üéØ Decision Maker (analyzes options, makes recommendations)
#   @SpiralCreate - ‚ú® Creative Innovator (explores creative solutions)
#   @SpiralCoach - üßò Process Coach (optimizes workflows, provides guidance)
#
# Example Usage:
#   @SpiralDev create a REST API in Rust
#   @SpiralPM what's the status on project X?
#   @SpiralQA review this code for bugs
#
# API Authentication:
# - Health check endpoint (/health) is always accessible
# - All other endpoints require x-api-key header or Authorization: Bearer header
# - Example: curl -H "x-api-key: your-key" http://localhost:3000/system/status
#
# Security Notes:
# - Never commit the actual .env file to version control
# - Rotate API keys regularly in production
# - Use strong, unique API keys (minimum 32 characters)
# - Monitor API usage and implement rate limiting as needed