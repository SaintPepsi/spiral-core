#!/bin/bash

# üîß Pre-commit hook for Spiral Core
# Automatically runs formatting and linting fixes before commit

set -e

# Ensure we have access to cargo (for GUI Git clients)
if ! command -v cargo &> /dev/null; then
    # Try to source cargo from common locations
    if [ -f "$HOME/.cargo/env" ]; then
        source "$HOME/.cargo/env"
    elif [ -f "$HOME/.profile" ]; then
        source "$HOME/.profile"
    elif [ -f "$HOME/.bashrc" ]; then
        source "$HOME/.bashrc"
    fi
fi

# Check if cargo is available now
if ! command -v cargo &> /dev/null; then
    echo "‚ö†Ô∏è  Warning: cargo not found in PATH"
    echo "   Skipping Rust formatting checks"
    echo "   To fix: ensure Rust is installed and in your PATH"
    exit 0  # Don't block commit, just warn
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß Running pre-commit checks...${NC}"
echo ""

# Track if any files were modified
FILES_MODIFIED=false

# 1. Run cargo fmt on all Rust files
echo -e "${YELLOW}üìê Checking Rust formatting...${NC}"
if ! cargo fmt -- --check 2>/dev/null; then
    echo -e "${BLUE}  Fixing Rust formatting...${NC}"
    cargo fmt
    FILES_MODIFIED=true
    echo -e "${GREEN}  ‚úÖ Rust formatting fixed${NC}"
else
    echo -e "${GREEN}  ‚úÖ Rust formatting is correct${NC}"
fi
echo ""

# 2. Fix Markdown linting issues if markdownlint is available
if command -v markdownlint &> /dev/null || command -v npx &> /dev/null; then
    echo -e "${YELLOW}üìù Checking Markdown files...${NC}"
    
    # Check if we should use markdownlint directly or via npx
    if command -v markdownlint &> /dev/null; then
        MDLINT="markdownlint"
    else
        MDLINT="npx markdownlint"
    fi
    
    # Find all markdown files that are staged
    STAGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)
    
    if [ -n "$STAGED_MD_FILES" ]; then
        # Try to fix markdown issues
        for file in $STAGED_MD_FILES; do
            if [ -f "$file" ]; then
                # Run markdownlint with fix flag
                if ! $MDLINT "$file" 2>/dev/null; then
                    echo -e "${BLUE}  Fixing: $file${NC}"
                    $MDLINT --fix "$file" 2>/dev/null || true
                    FILES_MODIFIED=true
                fi
            fi
        done
        echo -e "${GREEN}  ‚úÖ Markdown files checked${NC}"
    else
        echo -e "${GREEN}  ‚úÖ No staged Markdown files to check${NC}"
    fi
else
    echo -e "${YELLOW}üìù Skipping Markdown checks (markdownlint not installed)${NC}"
fi
echo ""

# 3. If files were modified, add them to the commit
if [ "$FILES_MODIFIED" = true ]; then
    echo -e "${BLUE}üì¶ Adding formatted files to commit...${NC}"
    
    # Re-add all staged files to include formatting changes
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            git add "$file"
        fi
    done
    
    echo -e "${GREEN}‚úÖ Files formatted and added to commit${NC}"
    echo ""
fi

# 4. Run quick compilation check
echo -e "${YELLOW}üî® Running quick compilation check...${NC}"
if ! cargo check --all-targets 2>&1 | grep -q "error"; then
    echo -e "${GREEN}  ‚úÖ Code compiles successfully${NC}"
else
    echo -e "${RED}  ‚ùå Compilation errors found!${NC}"
    echo -e "${RED}  Run 'cargo check --all-targets' to see details${NC}"
    echo -e "${RED}  Commit aborted.${NC}"
    exit 1
fi
echo ""

# Success message
echo -e "${GREEN}‚úÖ Pre-commit checks passed!${NC}"
echo ""

exit 0